{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\tutorial-blog_post_app-master\\\\client\\\\src\\\\pages\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  // Declaring a state variable called posts and initializing it to an empty array\n  const [posts, setPosts] = useState([]); // Getting the current URL query string (if any) using the useLocation hook from react-router-dom\n\n  const cat = useLocation().search; // Defining an effect that runs when the cat variable changes\n\n  useEffect(() => {\n    // Defining an asynchronous function called fetchData\n    const fetchData = async () => {\n      try {\n        // Making an HTTP GET request to the server to retrieve posts data based on the cat variable\n        const res = await axios.get(`/posts${cat}`); // Updating the posts state variable with the retrieved data\n\n        setPosts(res.data);\n      } catch (err) {\n        // Logging any errors that occur during the request\n        console.log(err);\n      }\n    }; // Calling the fetchData function\n\n\n    fetchData();\n  }, [cat]); // Specifying that this effect should only run when the cat variable changes\n  // Defining a helper function called getText that takes an HTML string and returns the text content\n\n  const getText = html => {\n    const doc = new DOMParser().parseFromString(html, \"text/html\");\n    return doc.body.textContent;\n  }; // Rendering the Home component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `../upload/${post.img}`,\n            alt: \"post cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            className: \"link\",\n            to: `/post/${post.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: getText(post.desc)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            className: \"link\",\n            to: `/post/${post.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Read More\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"TzsNNSvv6s01BLWRyLq0mkb3Xrg=\", false, function () {\n  return [useLocation];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/tutorial-blog_post_app-master/client/src/pages/Home.jsx"],"names":["axios","React","useEffect","useState","Link","useLocation","Home","posts","setPosts","cat","search","fetchData","res","get","data","err","console","log","getText","html","doc","DOMParser","parseFromString","body","textContent","map","post","img","id","title","desc"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,kBAAlC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC,CAFiB,CAIjB;;AACA,QAAMM,GAAG,GAAGJ,WAAW,GAAGK,MAA1B,CALiB,CAOjB;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMS,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF;AACA,cAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,SAAQJ,GAAI,EAAvB,CAAlB,CAFE,CAGF;;AACAD,QAAAA,QAAQ,CAACI,GAAG,CAACE,IAAL,CAAR;AACD,OALD,CAKE,OAAOC,GAAP,EAAY;AACZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KAVD,CAFc,CAad;;;AACAJ,IAAAA,SAAS;AACV,GAfQ,EAeN,CAACF,GAAD,CAfM,CAAT,CARiB,CAuBN;AAEX;;AACA,QAAMS,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAMC,GAAG,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAgCH,IAAhC,EAAsC,WAAtC,CAAZ;AACA,WAAOC,GAAG,CAACG,IAAJ,CAASC,WAAhB;AACD,GAHD,CA1BiB,CA+BjB;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAEGjB,KAAK,CAACkB,GAAN,CAAWC,IAAD,iBACT;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCAEE;AAAK,YAAA,GAAG,EAAG,aAAYA,IAAI,CAACC,GAAI,EAAhC;AAAmC,YAAA,GAAG,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCAEE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAuB,YAAA,EAAE,EAAG,SAAQD,IAAI,CAACE,EAAG,EAA5C;AAAA,mCACE;AAAA,wBAAKF,IAAI,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF,eAME;AAAA,sBAAIX,OAAO,CAACQ,IAAI,CAACI,IAAN;AAAX;AAAA;AAAA;AAAA;AAAA,kBANF,eAQE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAuB,YAAA,EAAE,EAAG,SAAQJ,IAAI,CAACE,EAAG,EAA5C;AAAA,mCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA,SAA2BF,IAAI,CAACE,EAAhC;AAAA;AAAA;AAAA;AAAA,cADD;AAFH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CA3DD;;GAAMtB,I;UAKQD,W;;;KALRC,I;AA6DN,eAAeA,IAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst Home = () => {\n  // Declaring a state variable called posts and initializing it to an empty array\n  const [posts, setPosts] = useState([]);\n\n  // Getting the current URL query string (if any) using the useLocation hook from react-router-dom\n  const cat = useLocation().search;\n\n  // Defining an effect that runs when the cat variable changes\n  useEffect(() => {\n    // Defining an asynchronous function called fetchData\n    const fetchData = async () => {\n      try {\n        // Making an HTTP GET request to the server to retrieve posts data based on the cat variable\n        const res = await axios.get(`/posts${cat}`);\n        // Updating the posts state variable with the retrieved data\n        setPosts(res.data);\n      } catch (err) {\n        // Logging any errors that occur during the request\n        console.log(err);\n      }\n    };\n    // Calling the fetchData function\n    fetchData();\n  }, [cat]); // Specifying that this effect should only run when the cat variable changes\n\n  // Defining a helper function called getText that takes an HTML string and returns the text content\n  const getText = (html) => {\n    const doc = new DOMParser().parseFromString(html, \"text/html\");\n    return doc.body.textContent;\n  };\n\n  // Rendering the Home component\n  return (\n    <div className=\"home\">\n      <div className=\"posts\">\n        {/* Mapping over the posts state variable and rendering a Post component for each post */}\n        {posts.map((post) => (\n          <div className=\"post\" key={post.id}>\n            <div className=\"post-img\">\n              {/* Rendering the post image */}\n              <img src={`../upload/${post.img}`} alt=\"post cover\" />\n            </div>\n            <div className=\"content\">\n              {/* Rendering a link to the post page */}\n              <Link className=\"link\" to={`/post/${post.id}`}>\n                <h1>{post.title}</h1>\n              </Link>\n              {/* Rendering the post description */}\n              <p>{getText(post.desc)}</p>\n              {/* Rendering a button to read more */}\n              <Link className=\"link\" to={`/post/${post.id}`}>\n                <button>Read More</button>\n              </Link>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}